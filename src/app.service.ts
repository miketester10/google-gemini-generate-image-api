import { GenerateContentResponse, GoogleGenAI, Modality } from '@google/genai';
import { HttpService } from '@nestjs/axios';
import {
  BadRequestException,
  Injectable,
  Logger,
  OnModuleInit,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { catchError, map, Observable, throwError } from 'rxjs';
import {
  GoogleAiModelResponse,
  Model,
} from './interfaces/google-ai-models-response.interface';

@Injectable()
export class AppService implements OnModuleInit {
  private readonly api_key = <string>(
    this.configService.get('GOOGLE_AI_API_KEY')
  );
  private readonly google_models_api = <string>(
    this.configService.get('GOOGLE_AI_MODELS_API')
  );
  private ai: GoogleGenAI;
  private model = 'gemini-2.0-flash-exp-image-generation';
  private readonly logger = new Logger(AppService.name);

  constructor(
    private readonly configService: ConfigService,
    private readonly httpService: HttpService,
  ) {}

  onModuleInit() {
    this.ai = new GoogleGenAI({
      apiKey: this.api_key,
    });
  }

  getGoogleAiModels(): Observable<Model[]> {
    const API = this.google_models_api + this.api_key;

    return this.httpService.get<GoogleAiModelResponse>(API).pipe(
      map((response) => response.data.models),
      catchError((error) => {
        this.logger.error(`Error fetching models: ${error}`);
        return throwError(
          () => new BadRequestException('Error fetching models'),
        );
      }),
    );
  }

  async genereteImage(prompt: string): Promise<Buffer> {
    const response: GenerateContentResponse =
      await this.ai.models.generateContent({
        model: this.model,
        contents: prompt,
        config: {
          responseModalities: [Modality.TEXT, Modality.IMAGE],
        },
      });

    const parts = response.candidates?.[0].content?.parts;

    if (!parts) {
      throw new BadRequestException('No candidates returned by Google AI');
    }

    let buffer: Buffer | undefined = undefined;

    for (const part of parts) {
      if (part.text) {
        this.logger.debug(`Text: ${part.text}`);
      } else if (part.inlineData?.data) {
        const imageBytes = part.inlineData.data;
        buffer = Buffer.from(imageBytes, 'base64');
        this.logger.debug(`Buffer created`);
      }
    }

    if (!buffer) {
      throw new BadRequestException('No image generated by Google AI.');
    }
    return buffer;
  }
}
